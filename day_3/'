#[derive(Debug)]
enum Direction {
    Left,
    Right,
    Up,
    Down
}

#[derive(Debug)]
struct Marker {
    left: usize,
    right: usize,
    up: usize,
    down: usize,
    direction: Direction,
    coord: (isize, isize)
}

impl Marker {
    fn new() -> Marker {
        Marker {
            left: 1,
            right: 1,
            up: 1,
            down: 1,
            direction: Direction::Right,
            coord: (0, 0)
        }
    }

    fn step(&mut self) {
        match self.direction {
            Direction::Left => {
                self.coord.0 -= 1;
                self.left -= 1;
                if self.left == 0 {
                    self.right += self.left+1;
                    self.direction = Direction::Down;
                }
            },
            Direction::Right => {
                self.coord.0 += 1;
                self.left += self.right+1;
                self.direction = Direction::Up;
            },
            Direction::Up => {
                self.coord.1 += self.up as isize;
                self.down += self.up+1;
                self.direction = Direction::Left;
            },
            Direction::Down => {
                self.coord.1 -= self.down as isize;
                self.up += self.down+1;
                self.direction = Direction::Right;
            },
        }
    }

    fn coord(&self) -> Option<(isize, isize)> {
        Some(self.coord)
    }
}

fn main() {
    let mut marker = Marker::new();
    for i in 0..5 {
        marker.step();
        println!("{} -- {:?}", i, marker.coord);
    }
}
