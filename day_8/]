#[macro_use]
extern crate lazy_static;
extern crate regex;

use std::fs::File;
use std::io::Read;
use regex::Regex;
use std::collections::HashMap;

#[derive(Debug)]
struct Register {
    name: String,
    value: isize
}

impl Register {
    fn new(name: String) -> Register {
        Register {
            name: name,
            value: 0
        }
    }

    fn inc(&mut self, value: isize) {
        self.value += value;
    }

    fn dec(&mut self, value: isize) {
        self.value -= value;
    }
}

#[derive(Debug)]
struct Machine {
    registers: HashMap<String, Register>
}

impl Machine {
    fn new() -> Machine {
        Machine {
            registers: HashMap::new()
        }
    }

    fn new_register(&mut self, name: String) {
        self.registers.insert(name.clone(), Register::new(name));
    }

    fn parse_line(&mut self, line: &str) {
        lazy_static! {
            static ref LINE_REGEX: Regex = Regex::new("([a-z]*) (inc|dec) (.*) if ([a-z]*) (.*) (.*)").unwrap();
        }

        for matches in LINE_REGEX.captures_iter(line) {
            let conditional_register = matches.get(4).expect("Unable to retrieve conditional register")
                                              .as_str();
            let conditional_operation = matches.get(5).expect("Unable to retrieve conditional operation")
                                              .as_str();
            let conditional_value = matches.get(6).expect("Unable to retrieve conditional value")
                                              .as_str();

            if self.registers.get(conditional_register).is_none() { self.new_register(conditional_register.to_string()); }
            let curr_register = self.registers.get(conditional_register);
            println!("{}", conditional_operation);
            match conditional_operation {
                "==" => {},
                _ => unimplemented!()
                            */


            }
        }
    }
}

fn task_1() {
    let mut f = File::open("./input").expect("file not found");
    // let mut f = File::open("./test").expect("file not found");
    let mut contents = String::new();
    f.read_to_string(&mut contents).expect("something wrong happened reading file");

    let mut machine = Machine::new();

    for line in contents.lines() {
        machine.parse_line(line);
    }
}


fn main() {
    task_1();
}
